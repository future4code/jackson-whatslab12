{"version":3,"sources":["components/mensagens/MensagensComp.js","App.js","serviceWorker.js","index.js"],"names":["CaixaMensagem","styled","div","InputMensagem","input","Mensagens","state","message","remetente","mensagem","valorInputRemetente","valorInputMensagem","novoUsuario","novaMensagem","mensagemNova","setState","onChangeInputRemetente","event","target","value","onChangeInputMensagem","listaDeMensagem","this","map","messages","onChange","placeholder","onClick","React","Component","ContainerGrande","main","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"msBAIA,IAAMA,EAAgBC,IAAOC,IAAV,KAebC,EAAgBF,IAAOG,MAAV,KAmFJC,EA9Ef,4MACIC,MAAQ,CACJC,QAAS,CACL,CACAC,UAAW,UACXC,SAAU,mBAEd,CACID,UAAW,QACXC,SAAU,wBAEd,CACID,UAAW,OACXC,SAAU,6BAGdC,oBAAqB,GACrBC,mBAAoB,IAjB5B,EAoBIC,YAAc,WACV,IAAMC,EAAe,CACjBL,UAAW,EAAKF,MAAMI,oBACtBD,SAAU,EAAKH,MAAMK,oBAGnBG,EAAY,sBAAO,EAAKR,MAAMC,SAAlB,CAA2BM,IAC7C,EAAKE,SAAS,CAACR,QAASO,KA3BhC,EA8BIE,uBAAyB,SAACC,GACtB,EAAKF,SAAS,CAACL,oBAAqBO,EAAMC,OAAOC,SA/BzD,EAkCIC,sBAAwB,SAACH,GACrB,EAAKF,SAAS,CAACJ,mBAAoBM,EAAMC,OAAOC,SAnCxD,uDAuCQ,IAAME,EAAkBC,KAAKhB,MAAMC,QAAQgB,KAAK,SAACC,GAC7C,OACI,kBAACxB,EAAD,KACKwB,EAAShB,UADd,MAC4BgB,EAASf,aAK7C,OACI,6BACI,6BACKY,GAGL,6BAEC,kBAAClB,EAAD,CACIgB,MAAOG,KAAKhB,MAAMI,oBAClBe,SAAUH,KAAKN,uBACfU,YAAa,eAEjB,kBAACvB,EAAD,CACIgB,MAAOG,KAAKhB,MAAMK,mBAClBc,SAAUH,KAAKF,sBACfM,YAAa,aAGlB,4BAAQC,QAASL,KAAKV,aAAtB,gBAlEhB,GAA+BgB,IAAMC,W,0QCpBrC,IAAMC,EAAkB7B,IAAO8B,KAAV,KAqBNC,MARf,WACE,OACE,kBAACF,EAAD,KACI,kBAAC,EAAD,QCRYG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM3C,c","file":"static/js/main.5e4c8e71.chunk.js","sourcesContent":["import React from 'react'\nimport styled from \"styled-components\"\n\n\nconst CaixaMensagem = styled.div`\n    display:flex;\n    flex-direction: column;\n    border: 1px solid #d3d3d3;\n    margin-left: 5px;\n    padding: 10px;\n    margin-bottom: 12px;\n    height: 28px;\n    margin-right: 10px;\n    width: 208px;\n    border-radius: 30px;\n    margin-top: 10px;\n    background-color: white;\n`\n\nconst InputMensagem = styled.input`\n    \n     \n`\n\nexport class Mensagens extends React.Component{\n    state = {\n        message: [\n            {\n            remetente: \"Claudia\",\n            mensagem: \"Olar, tudo bom?\"\n        },\n        {\n            remetente: \"Yvini\",\n            mensagem: \"Oie. tudo sim. E vc?\"\n        },\n        {\n            remetente: \"Caio\",\n            mensagem: \"E ai, gente, tudo legal?\"\n        }\n        ],\n        valorInputRemetente: \"\",\n        valorInputMensagem: \"\"\n    };\n\n    novoUsuario = () => {\n        const novaMensagem = {\n            remetente: this.state.valorInputRemetente,\n            mensagem: this.state.valorInputMensagem\n        };\n\n        const mensagemNova = [...this.state.message, novaMensagem];\n        this.setState({message: mensagemNova})\n    };\n\n    onChangeInputRemetente = (event) =>{\n        this.setState({valorInputRemetente: event.target.value});\n    };\n\n    onChangeInputMensagem = (event) =>{\n        this.setState({valorInputMensagem: event.target.value});\n    };\n\n    render() {\n        const listaDeMensagem = this.state.message.map ((messages) => {\n            return (\n                <CaixaMensagem>\n                    {messages.remetente} - {messages.mensagem}\n                </CaixaMensagem>\n            );\n        });\n\n        return (\n            <div>\n                <div>\n                    {listaDeMensagem}\n                </div>\n                 \n                <div>\n                    \n                 <InputMensagem\n                     value={this.state.valorInputRemetente}\n                     onChange={this.onChangeInputRemetente}\n                     placeholder={\"usuÃ¡rio\"}\n                     />\n                 <InputMensagem\n                     value={this.state.valorInputMensagem}\n                     onChange={this.onChangeInputMensagem}\n                     placeholder={\"mensagem\"}\n                     />\n\n                <button onClick={this.novoUsuario}>Enviar</button>\n                 \n                    \n                </div>\n            </div>\n        \n        );\n    }\n\n    \n};\n\nexport default Mensagens;","import React from 'react';\nimport Mensagens from \"./components/mensagens/MensagensComp\"\nimport styled from \"styled-components\"\n\nconst ContainerGrande = styled.main`\n    display: flex;\n    flex-direction: column;\n    align-self: center;\n    border: 1px solid;\n    width: 300px;\n    height: 20em;\n    margin-left: 30em;\n    background-color:#b8bfd8;\n  \n`\n\n\nfunction App() {\n  return (\n    <ContainerGrande>\n        <Mensagens/>\n    </ContainerGrande>\n  );\n}\n\nexport default App;\n  ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}